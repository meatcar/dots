#!/usr/bin/env bash
# Source: https://github.com/felixSchl/dotfiles/blob/master/bin/tmux-completions
# Create a new tmux session
# Note: we must spawn the sessions in detached mode and the use
# `switch-client` to attach to them. Otherwise we'd get an error saying
# that the "terminal is not available"

PROJECT_PATHS=

_find_existing_sid () {
	set -eo pipefail
	local -r name=$1
	sid=$(tmux list-sessions -F '#{session_name}:#{session_id}' \
		| grep "$name:" \
		| head -n 1 \
		| cut -d ':' -f 2
	)

	if [ -n "$sid" ]; then
		echo "$sid"
		return 0
	else
		return 1
	fi
}

tmux_session_name () {
	echo "$1" | sed 's/[.:]/-/g'
}

make_session () {
		echo 'Create new session (Ctrl-C to cancel):' >&2
		echo "Set \$PROJECT_PATHS to streamline this process." >&2
		echo >&2
		read -rep "Set working directory (default: \"$PWD\"):"$'\n> ' dir
		if [ -z "$dir" ]; then dir=$PWD; fi
		echo
		read -rp "Set name (default \"${dir##*/}\"):"$'\n> ' name
		if [ -z "$name" ]; then name=${dir##*/}; fi
		tmux new-session -d -c "$dir" -n "$name" -s "$(tmux_session_name "$name")" -P -F "#{session_id}"
}

fetch_session () {
	projects=$(echo "$PROJECT_PATHS" | tr ':' '\n')

	for dir in $projects; do
		if [ -d "$dir" ]; then
			find "${dir%*/}" -maxdepth 1 -type d | tail -n+2
		fi
	done

	choice=$(awk '!seen[$1]++' | fzf --reverse --prompt 'Create new session - choose project: ' --expect='~' )

	key=
	read -r key <(echo "$choice")
	if [[ "$key" == '~' ]]; then
		tmux new-session -d -c ~ -P -F "#{session_id}"
	else
		read -r dir;
		name=${dir##*/}
		_find_existing_sid "$name" || {
			tmux new-session -d -c "$dir" -n "$name" -s "$(tmux_session_name "$name")" -P -F "#{session_id}"
		}
	fi
}

get_session_id () {
	set -eo pipefail
	if [ -z "$PROJECT_PATHS" ]; then
		make_session
	else
		fetch_session
	fi
}

new_session_id=$(get_session_id)
[ -n "$new_session_id" ] && tmux switch-client -t "$new_session_id"
