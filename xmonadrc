-- vim:ft=haskell:
import XMonad hiding ((|||))
import XMonad.ManageHook
import qualified XMonad.StackSet as W

import XMonad.Actions.CycleWS
import XMonad.Actions.Promote

import XMonad.Hooks.DynamicLog
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.UrgencyHook
import XMonad.Hooks.EwmhDesktops
import XMonad.Hooks.SetWMName

import XMonad.Layout.DwmStyle
import XMonad.Layout.IM
import XMonad.Layout.LayoutCombinators
import XMonad.Layout.Named
import XMonad.Layout.NoBorders
import XMonad.Layout.PerWorkspace
import XMonad.Layout.Reflect
import XMonad.Layout.ResizableTile
import XMonad.Layout.Tabbed
import XMonad.Layout.LayoutHints
import XMonad.Layout.Gaps
import XMonad.Layout.Spacing
import XMonad.Layout.NoBorders 

import XMonad.Actions.UpdatePointer

import XMonad.Util.EZConfig
import XMonad.Util.Run
import XMonad.Util.Scratchpad
import XMonad.Util.Loggers
import XMonad.Util.Font

import Data.Ratio ((%))

statusBarCmd= "dzen2 -e '' -ta l -fn 'smoothansi-10' -bg black -fg white -xs 1 -dock"

main = do
       xmproc <- spawnPipe statusBarCmd
       xmonad $ withUrgencyHook dzenUrgencyHook { args = ["-fn", "smoothansi-10","-bg", "#ffcc00", "-fg", "#666666"] } $ defaultConfig
                     { borderWidth        = 2
                     , workspaces         = ["1:main","2:web","3:dev","4:im","5:misc"] ++ map show [6..9]
                     , terminal           = "urxvtc"
                     , modMask            = mod4Mask
                     , manageHook         = myManageHook <+> manageHook defaultConfig <+> manageDocks <+> scratchpadManageHookDefault
                     , logHook            = (dynamicLogWithPP $ myPP xmproc) >>  updatePointer (Relative 0.5 0.5)  
                     , layoutHook         = myLayouts
                     , startupHook        = ewmhDesktopsStartup >> setWMName "LG3D"
                     , normalBorderColor  = "#000000" 
                     , focusedBorderColor = "#999966"
                     }
                     `additionalKeysP` myKeys xmproc 

myManageHook  = composeAll [ className =? "Pidgin"         --> doF (W.shift "4:im")
                           , className =? "Empathy"        --> doF (W.shift "4:im")
                           , className =? "Firefox"        --> doF (W.shift "2:web")
                           , className =? "Chromium"  --> doF (W.shift "2:web")
                           , title     =? "alpine"           --> doF (W.shift "4:im")
                           ]

myKeys conf = [ ("M-<Return>", spawn "urxvtc")    
              , ("M-p",        spawn "launch")
              , ("M-b",        spawn "dmenfm")
              , ("M-d",        kill)
              -- Next random wallpaper
              , ("M-n",        spawn "wallp -n")
              -- Recompile
              , ("M-q",      spawn "xmonad --recompile && xmonad --restart")
              -- Screen Shot
              , ("M-<F7>",     spawn "scrot '%s-%Y-%m-%d_full.png' -q 100 -e 'mv $f ~/Multimedia/Pictures/screenies'")
              , ("M-S-<F7>",   spawn "scrot '%s-%Y-%m-%d_sel_$wx$h.png' -s -q 100 -e 'mv $f ~/Multimedia/Pictures/screenies'")
              -- lock screen
              , ("M-<Esc>",    spawn "xscreensaver-command -lock")

              -- run programs
              , ("M-f",        spawn "firefox-beta-bin")
              , ("M-e",        spawn "thunar")
              -- resize tile
              , ("M-a",        sendMessage MirrorShrink)
              , ("M-z",        sendMessage MirrorExpand)
              -- moving workspaces
              , ("M-<Left>",    prevWS)
              , ("M-<Right>",   nextWS)
              , ("M-S-<Left>",  shiftToPrev)
              , ("M-S-<Right>", shiftToNext)
              , ("M-<Tab>",     toggleWS)

              , ("M-S-<Return>", promote)

              , ("M-u", focusUrgent)

              , ("M-t", withFocused $ windows . W.sink)

              -- MPD controls
              , ("M-C-<Left>",    spawn "mpc volume -2")
              , ("M-C-<Right>",   spawn "mpc volume +2")
              , ("M-C-p",         spawn "mpc toggle")
              , ("M-C-i",         spawn "mpc next")
              , ("M-C-o",         spawn "mpc prev")
              ]

myPP h = defaultPP
                 {  ppCurrent = wrap "^fg(#ffcc00)^bg(#666666) " " ^fg()^bg()"
                  , ppHidden  = wrap "^i(/home/meatcar/.xmonad/bitmaps/rob/has_win_nv.xbm)" " "
                  , ppHiddenNoWindows  = wrap " " " "
                  , ppSep     = " ^fg(grey60)+^fg() "
                  , ppWsSep   = "|"
                  , ppLayout  = dzenColor "white" "" .
                                (\x -> case x of
                                         "Tall"  -> "^i(/home/meatcar/.xmonad/bitmaps/rob/tall.xbm)"
                                         "Mirror" -> "^i(/home/meatcar/.xmonad/bitmaps/rob/mtall.xbm)"
                                         "Tabs" -> "^i(/home/meatcar/.xmonad/bitmaps/rob/full.xbm)"
                                         "IM"  -> "IM"
                                )
                  , ppTitle   = dzenColor "white" "" . wrap "[" "]"
                  , ppOutput  = hPutStrLn h
                  , ppUrgent = dzenColor "yellow" "red" . dzenStrip
                  }

myTheme = defaultTheme { decoHeight = 16
                        , activeColor = "#a6c292"
                        , activeBorderColor = "#a6c292"
                        , activeTextColor = "#000000"
                        , inactiveBorderColor = "#000000"
                        }

myLayouts = smartBorders $ avoidStruts $ 
  onWorkspace "4:im" (named "IM" (reflectHoriz $ withIM (1%8) (Role "buddy_list") (reflectHoriz $ dwmStyle shrinkText myTheme tiledIM ||| named "Mirror" (Mirror tiled) |||  (smartBorders $ tabs)))) $ 
  onWorkspace "3:dev" (tiledDev ||| named "Mirror" (Mirror tiled) ||| tabs) $
  (tiled ||| named "Mirror" (Mirror tiled) ||| tabs)
    where
      tiled = named "Tall" (ResizableTall 1 (3/100) (3/5) [] )
      tiledDev = named "Tall" (ResizableTall 1 (3/100) (1/2) [])
      tiledIM = named "Tall" (ResizableTall 1 (3/100) (3/4) [])
      tabs = named "Tabs" (tabbed shrinkText myTheme)
