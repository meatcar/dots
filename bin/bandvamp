#!/bin/bash
    # Usage:        ./Bandvamp Profile
    # Profile is the subdomain of bandcamp to rip, e.g. lapfox -> http://lapfox.bandcamp.com
    #
    # This script rips all availible 128kbps MP3 samples from a Bandcamp profile.
    # The files are written to subdirectories which bear the names of the albums and profile, e.g.
    # ./lapfox/BAD_COMMAND/headrockin.mp3
    # Directory and file names won't contain any of \/:*? "<>| to avoid problems on NTFS drives,
    # if a track or album contains one of these symbols in their names then it is replaced with one
    # a fixed-width unicode equivilent so that it looks similar but isn't exactly the same.
    #
    # If you like the sample music then you can buy the higher quality versions from Bandcamp to
    # help incentivise the artists to release more and make the world a better place.
    #
    # Version 1.0 Written by CodeX (m8r-qgwf5u@mailinator.com)
     
    IFS='
    '
    BOLD=`tput bold`
    NORM=`tput sgr0`
     
    if [ "$#" == "0" ]; then
            echo "Usage:    $0 Profile"
            echo "Profile is the subdomain of bandcamp to rip, e.g. lapfox -> http://lapfox.bandcamp.com"
            echo ""
            echo "This script rips all availible 128kbps MP3 samples from a Bandcamp profile."
            echo ""
            echo "The files are written to subdirectories which bear the names of the albums and profile, e.g."
            echo "the album BAD_COMMAND on the lapfox profile will store the file for headrockin at"
            echo " ./lapfox/BAD_COMMAND/headrockin.mp3"
            echo ""
            echo "Directory and file names won't contain any of \\/:*? \"<>| to avoid problems on NTFS drives,"
            echo "if a track or album contains one of these symbols in their names then it is replaced with a"
            echo "fixed-width unicode equivilent so that it looks similar but isn't exactly the same."
            echo ""
            echo "If you like the sample music then you can buy the higher quality versions from Bandcamp to"
            echo "help incentivise the artists to release more and make the world a better place."
            echo ""
            echo "Version 1.0 Written by CodeX (m8r-qgwf5u@mailinator.com)"
            exit 1
    fi
     
    # MEAT
    TARGET=${1-lapfox} # looks like this as lapfox was excellent for testing
    STAGE=${2-0} # STAGE is used in the recursion below
    shift 2
     
    PARALLEL_ALBUMS=8 # Max number of albums to download from at once
    PARALLEL_TRACKS=8 # Max number of tracks to download from an album at once
     
    SITE=http://$TARGET.bandcamp.com
     
    # Converts NTFS unfriendly characters to homoglyphs to avoid name issues
    function homglyph {
            echo "$1" | sed 's/\\//g' | sed 's/\///g' | sed 's/://g' | sed 's/*//g' | sed 's/\?//g' | sed 's/"//g' | sed 's/<//g' | sed 's/>//g' | sed 's/|//g' | sed 's/ //g'
    }
     
    # Main code here
    case $STAGE in
            # This is the entry point, get the home page and find all of the album links and do step 1 in parallel
            0)
                    mkdir $TARGET 2>/dev/null
                    echo "Finding album pages..."
                    curl $SITE -Ss | grep -hoP '(?<=<a href=\")/album/.+?(?=\")'| sort -u | xargs -n 1 -P $PARALLEL_ALBUMS $0 $TARGET 1
                    ;;
     
            # $1 something like /album/name, use this to get the album page and then pass track info to stage 2
            1)
                    PAGE=`mktemp`
                    curl $SITE$1 -Ss > $PAGE
                    ARTIST=`grep -hoP '(?<=artist : ").+?(?=",)' $PAGE`
                    YEAR=`grep -hoP '(?<=album_release_date: ").+?(?=")' $PAGE | cut -d ' ' -f 3`
                    IDS=(`grep -hoP '(?<=e,"id":)\d+(?=,)' $PAGE`)
                    NAMES=(`grep -hoP '(?<="title":").+?(?=")' $PAGE`)
                    ALBUM=${NAMES[0]}
                    NAMES=("${NAMES[@]:1}")
     
                    # The link appears on free albums once a purchase (with $0) has been made
                    # It may be possible to change the ID in the link to something of equil or less value
    #               LINK=`grep -hoP "(?<=PaymentData.paymentDownloadPage = ').+?(?=',)" $PAGE`
    #               echo "Free download link for $ALBUM: $LINK"
    #               echo "${#IDS[@]}:${#NAMES[@]}"
                   
                    rm $PAGE
                   
                    mkdir "$TARGET/`homglyph $ALBUM`" 2>/dev/null
                    for ((i=0; i<${#NAMES[@]}; i++)); do
                            ORDINAL=$(($i + 1))
                            echo -ne "${IDS[$i]}\x00${NAMES[$i]}\x00$ALBUM\x00$ARTIST\x00$ORDINAL/${#NAMES[@]}\x00$YEAR\x00"
                    done | xargs -0 -n 6 -P $PARALLEL_TRACKS $0 $TARGET 2
                    ;;
     
            # This takes info for a song and then downloads it
            2)
     echo "${@}"
                    ID=$1
                    NAME=$2
                    FNAME=`homglyph $NAME`
                    ALBUM=$3
                    FALBUM=`homglyph $ALBUM`
                    ARTIST=$4
                    TRACK=$5
                    YEAR=$6
                   
                    FILE="$TARGET/$FALBUM/${FNAME}.mp3"
                   
                    echo "$YEAR $BOLD$ALBUM$NORM by $BOLD$ARTIST$NORM - ($TRACK) $BOLD${NAME}$NORM ${ID}"
                    curl "http://popplers5.bandcamp.com/download/track?enc=mp3-128&id=${ID}&stream=1" -o $FILE -LSs
                    # Some files in albums aren't streamable music, these will return a HTML document
                    if [ "`head -c 9 "$FILE"`" == '<!DOCTYPE' ]; then
                            rm "$FILE"
                            echo "$FILE was not a MP3"
                            exit
                    fi
                    # Add ID3v2 tags to file based on what we have, most tracks won't have tags already
                    id3v2 -a "$ALBUM" -A "$ARTIST" -t "$NAME" -T "$TRACK" -y "$YEAR" --WPUB "$SITE" "$FILE"
                    ;;
    esac
    exit
